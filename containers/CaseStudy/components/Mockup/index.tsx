//@ts-nocheck
import { MathUtils } from "three";
import React, { Suspense, useRef } from "react";
import * as THREE from "three";
import { Canvas, useFrame, useLoader } from "@react-three/fiber";
import {
  Html,
  Environment,
  useGLTF,
  ContactShadows,
  OrbitControls,
} from "@react-three/drei";
import Image from "next/image";
import { ScrollArea } from "./styles";
function Model(props) {
  const group = useRef();
  // Load model
  const { nodes, materials } = useGLTF("/assets/mac-draco.glb");
  // Make it float
  useFrame((state) => {
    const t = state.clock.getElapsedTime();
    group.current.rotation.x = MathUtils.lerp(
      group.current.rotation.x,
      Math.cos(t / 2) / 10 + 0.25,
      0.1
    );
    group.current.rotation.y = MathUtils.lerp(
      group.current.rotation.y,
      Math.sin(t / 2) / 10,
      0.1
    );
    group.current.rotation.z = MathUtils.lerp(
      group.current.rotation.z,
      Math.sin(t / 2) / 20,
      0.1
    );
    group.current.position.y = MathUtils.lerp(
      group.current.position.y,
      (-5 + Math.sin(t)) / 5,
      0.1
    );
  });
  // The jsx graph was auto-generated by: https://github.com/pmndrs/gltfjsx
  const texture = useLoader(
    THREE.TextureLoader,
    props.image
  );
  texture.flipY = false;
  return (
    <group ref={group} position={[0, 0, 3]} {...props} dispose={null}>
      <group rotation-x={-0.425} position={[0, -0.04, 0.41]}>
        <group position={[0, 2.96, -0.13]} rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            material={materials.aluminium}
            geometry={nodes["Cube008"].geometry}
          />
          <mesh
            material={materials["matte.001"]}
            geometry={nodes["Cube008_1"].geometry}
          />
          <mesh geometry={nodes["Cube008_2"].geometry}>
            {/* Drei's HTML component can now "hide behind" canvas geometry */}
            <meshBasicMaterial attach="material" map={texture} />
          </mesh>
        </group>
      </group>
      <mesh
        material={materials.keys}
        geometry={nodes.keyboard.geometry}
        position={[1.79, 0, 3.45]}
      />
      <group position={[0, -0.1, 3.39]}>
        <mesh
          material={materials.aluminium}
          geometry={nodes["Cube002"].geometry}
        />
        <mesh
          material={materials.trackpad}
          geometry={nodes["Cube002_1"].geometry}
        />
      </group>
      <mesh
        material={materials.touchbar}
        geometry={nodes.touchbar.geometry}
        position={[0, -0.03, 1.2]}
      />
    </group>
  );
}

interface IProps {
  caseStudy: CaseStudieType;
}

export default function Mockup({ caseStudy }: IProps) {
  return (
    <div style={{ height: "600px" }}>
      {/* <ScrollArea /> */}
      <Canvas
        onPointerMove={undefined}
        dpr={[1, 2]}
        gl={{ antialias: true }}
        camera={{ position: [-0, -4, -20], fov: 35 }}
      >
        <pointLight position={[10, 10, 10]} intensity={1.5} />
        <Suspense fallback={null}>
          <group rotation={[0, Math.PI, 0]}>
            <Model image={caseStudy.displayImage}/>
          </group>
          <Environment preset="city" />
        </Suspense>
        <OrbitControls
          enablePan={false}
          enableZoom={false}
          enableRotate={false}
          minPolarAngle={Math.PI / 2}
          maxPolarAngle={Math.PI / 2}
          maxAzimuthAngle={-Math.PI / 1.5}
          minAzimuthAngle={Math.PI / 1.5}
        />
      </Canvas>
    </div>
  );
}
